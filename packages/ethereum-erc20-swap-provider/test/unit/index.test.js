/* eslint-env mocha */

import EthereumErc20SwapProvider from '../../lib'

const { expect } = require('chai').use(require('chai-as-promised'))

describe('Ethereum ERC20 Swap provider', () => {
  let provider

  beforeEach(() => {
    provider = new EthereumErc20SwapProvider()
    provider.setClient({
      getMethod (name) {
        if (name === 'getContractAddress') { return () => '89d24A6b4CcB1B6fAA2625fE562bDD9a23260359' } else { throw new Error('method not mocked') }
      }
    })
  })

  describe('Generate swap', () => {
    it('should generate correct bytecode', () => {
      return expect(provider.createSwapScript('5acbf79d0cf4139a6c3eca85b41ce2bd23ced04f',
        '0a81e8be41b21f651a71aab1a85c6813b8bbccf8',
        '91d6a24697ed31932537ae598d3de3131e1fcd0641b9ac4be7afcb376386d71e',
        255))
        .to.equal('6080604052600080546001600160a01b0319908116735acbf79d0cf4139a6c3eca85b41ce2bd23ced04f17909155600180548216730a81e8be41b21f651a71aab1a85c6813b8bbccf81790556002805482167389d24a6b4ccb1b6faa2625fe562bdd9a232603591790819055600380549092166001600160a01b03919091161790557f91d6a24697ed31932537ae598d3de3131e1fcd0641b9ac4be7afcb376386d71e6004553480156100b157600080fd5b506103e4806100c16000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063590e1ae31461003b578063bd66528a14610045575b600080fd5b610043610062565b005b6100436004803603602081101561005b57600080fd5b503561017c565b7f00000000000000000000000000000000000000000000000000000000000000ff421161008e57600080fd5b600154600354604080516370a0823160e01b8152306004820152905161016e9363a9059cbb60e01b936001600160a01b03918216939116916370a0823191602480820192602092909190829003018186803b1580156100ec57600080fd5b505afa158015610100573d6000803e3d6000fd5b505050506040513d602081101561011657600080fd5b5051604080516001600160a01b0390931660248401526044808401929092528051808403909201825260649092019091526020810180516001600160e01b03166001600160e01b03199093169290921790915261029c565b6001546001600160a01b0316ff5b600454600282604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106101d05780518252601f1990920191602091820191016101b1565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa15801561020f573d6000803e3d6000fd5b5050506040513d602081101561022457600080fd5b50511461023057600080fd5b600054600354604080516370a0823160e01b8152306004820152905161028e9363a9059cbb60e01b936001600160a01b03918216939116916370a0823191602480820192602092909190829003018186803b1580156100ec57600080fd5b6000546001600160a01b0316ff5b60606102a7826102d5565b8051909150156102d1578080602001905160208110156102c657600080fd5b50516102d157600080fd5b5050565b600254604051825160609260009284926001600160a01b0390921691869190819060208401908083835b6020831061031e5780518252601f1990920191602091820191016102ff565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610380576040519150601f19603f3d011682016040523d82523d6000602084013e610385565b606091505b509150915081156103995791506103a99050565b8051156100365780518082602001fd5b91905056fea2646970667358221220160723b130690048d6220e7557605adfe6c53698edfa5116bd501c69a2fd0f7764736f6c634300060a0033')
    })

    it('should throw error when recipient address too long', () => {
      return expect(() => provider.createSwapScript('13375acbf79d0cf4139a6c3eca85b41ce2bd23ced04f',
        '0a81e8be41b21f651a71aab1a85c6813b8bbccf8',
        '91d6a24697ed31932537ae598d3de3131e1fcd0641b9ac4be7afcb376386d71e',
        6016519))
        .to.throw()
    })

    it('should throw error when recipient address too short', () => {
      return expect(() => provider.createSwapScript('39a6c3eca85b41ce2bd23ced04f',
        '0a81e8be41b21f651a71aab1a85c6813b8bbccf8',
        '91d6a24697ed31932537ae598d3de3131e1fcd0641b9ac4be7afcb376386d71e',
        6016519))
        .to.throw()
    })

    it('should throw error when refund address too long', () => {
      return expect(() => provider.createSwapScript('5acbf79d0cf4139a6c3eca85b41ce2bd23ced04f',
        '13370a81e8be41b21f651a71aab1a85c6813b8bbccf8',
        '91d6a24697ed31932537ae598d3de3131e1fcd0641b9ac4be7afcb376386d71e',
        6016519))
        .to.throw()
    })

    it('should throw error when refund address too short', () => {
      return expect(() => provider.createSwapScript('5acbf79d0cf4139a6c3eca85b41ce2bd23ced04f',
        '8be41b21f651a71aab1a85c6813b8bbccf8',
        '91d6a24697ed31932537ae598d3de3131e1fcd0641b9ac4be7afcb376386d71e',
        6016519))
        .to.throw()
    })

    it('should throw error when secret hash longer than 32 bytes', () => {
      return expect(() => provider.createSwapScript('5acbf79d0cf4139a6c3eca85b41ce2bd23ced04f',
        '0a81e8be41b21f651a71aab1a85c6813b8bbccf8',
        '91d6a24697ed31932537ae598d3de3131e1fcd0641b9ac4be7afcb376386d71e13371337',
        6016519))
        .to.throw()
    })

    it('should throw error when secret hash shorter than 32 bytes', () => {
      return expect(() => provider.createSwapScript('5acbf79d0cf4139a6c3eca85b41ce2bd23ced04f',
        '0a81e8be41b21f651a71aab1a85c6813b8bbccf8',
        '91d6a24697ed31932537ae598d3de3131e1fcd0641b9ac4be7afcb376386',
        6016519))
        .to.throw()
    })

    it('should throw error when secret hash is hash of secret 0', () => {
      return expect(() => provider.createSwapScript('5acbf79d0cf4139a6c3eca85b41ce2bd23ced04f',
        '0a81e8be41b21f651a71aab1a85c6813b8bbccf8',
        '66687aadf862bd776c8fc18b8e9f8e20089714856ee233b3902a591d0d5f2925',
        6016519))
        .to.throw()
    })
  })
})
